{"version":3,"sources":["components/Account.js","components/Modals/NewAddress.js","components/Modals/NewDomain.js","components/Domains.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Account","activeUser","this","props","ual","Segment","secondary","Header","accountName","requestPermission","Subheader","href","onClick","logout","Button","content","showModal","size","primary","Component","defaultFields","fio_address","owner_fio_public_key","max_fee","actor","tpid","NewAddress","state","account","undefined","balance","errors","fee","fields","show","onOpen","e","data","resetData","getAccount","getBalance","getFee","setState","rpc","get_account","then","Object","assign","permissions","filter","p","perm_name","required_auth","keys","key","get_currency_balance","get_table_rows","code","table","scope","key_type","index_position","lower_bound","upper_bound","limit","results","rows","suf_amount","hide","onChange","name","value","transact","a","tx","actions","authorization","permission","signTransaction","expireSeconds","blocksBehind","onSuccess","cause","json","domain","Modal","closeIcon","padded","style","marginTop","color","Table","Row","Cell","textAlign","Icon","loading","toFixed","Form","error","length","onSubmit","map","field","Field","Input","pointing","Message","header","basic","clearing","floated","open","onClose","trigger","icon","fio_domain","NewDomain","Domains","addresses","domains","sync","getDomains","getAddresses","domainhash","uniqBy","Container","fluid","attached","striped","HeaderCell","Body","matching","collapsing","verticalAlign","definition","is_public","Date","expiration","toUTCString","address","public_address","Home","margin","Grid","relaxed","Column","width","columns","stacked","chain","chainId","rpcEndpoints","protocol","host","port","UALWrapper","anchor","Anchor","appName","scatter","Scatter","authenticators","chains","TestAppConsumer","withUAL","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8eeae107.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Button,\n  Container,\n  Grid,\n  Header,\n  Segment,\n} from 'semantic-ui-react';\n\nexport default class Account extends Component {\n  render() {\n    const { ual: { activeUser } } = this.props;\n    if (activeUser) {\n      return (\n        <Segment secondary>\n          <Header>\n            <span>{activeUser.accountName}@{activeUser.requestPermission}</span>\n            <Header.Subheader>\n              <a href=\"\" onClick={this.props.ual.logout}>Sign out</a>\n            </Header.Subheader>\n          </Header>\n        </Segment>\n      )\n    }\n    return (\n      <Button\n        content=\"Sign in\"\n        onClick={this.props.ual.showModal}\n        size=\"large\"\n        primary\n      />\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport {\n  Button,\n  Container,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Message,\n  Modal,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\n\nconst defaultFields = {\n  fio_address: '',\n  owner_fio_public_key: '',\n  max_fee: '',\n  actor: '',\n  tpid: '',\n}\n\nexport default class NewAddress extends Component {\n  state = {\n    account: undefined,\n    balance: undefined,\n    errors: [],\n    fee: undefined,\n    fields: defaultFields,\n    show: false,\n  }\n  onOpen = (e, data) => {\n    const { ual: { activeUser } } = this.props;\n    this.resetData();\n    this.getAccount();\n    this.getBalance();\n    this.getFee();\n  }\n  resetData = () => this.setState({\n    account: undefined,\n    balance: undefined,\n    errors: [],\n    fee: undefined,\n    fields: defaultFields,\n  })\n  getAccount = () => {\n    const { ual: { activeUser } } = this.props;\n    activeUser.rpc.get_account(activeUser.accountName).then((account) => {\n      this.setState({\n        account,\n        fields: Object.assign({}, this.state.fields, {\n          actor: activeUser.accountName,\n          owner_fio_public_key: account.permissions.filter((p) => p.perm_name === 'owner')[0].required_auth.keys[0].key\n        })\n      })\n    });\n  }\n  getBalance = () => {\n    const { ual: { activeUser } } = this.props;\n    activeUser.rpc.get_currency_balance('fio.token', activeUser.accountName, 'fio').then((balance) => this.setState({ balance }));\n  }\n  getFee = () => {\n    const { ual: { activeUser: { rpc } } } = this.props;\n    rpc.get_table_rows({\n      code: 'fio.fee',\n      table: 'fiofees',\n      scope: 'fio.fee',\n      key_type: 'i128',\n      index_position: 2,\n      lower_bound: '0x1a5f09714542254caaab363d520adfbd',\n      upper_bound: '0x1a5f09714542254caaab363d520adfbd',\n      limit: 1,\n    }).then((results) => {\n      this.setState({\n        fee: results.rows[0],\n        fields: Object.assign({}, this.state.fields, {\n          max_fee: results.rows[0].suf_amount\n        })\n      });\n    })\n  }\n  hide = () => this.setState({ show: false })\n  show = () => this.setState({ show: true })\n  onChange = (e, { name, value }) => this.setState({\n    fields: Object.assign({}, this.state.fields, {\n      [name]: value\n    })\n  })\n  transact = async () => {\n    const { fields } = this.state;\n    const { ual: { activeUser } } = this.props\n    try {\n      const { accountName, requestPermission } = activeUser\n      const tx = {\n        actions: [{\n          account: 'fio.address',\n          name: 'regaddress',\n          authorization: [{ actor: accountName, permission: requestPermission }],\n          data: fields,\n        }],\n      }\n      await activeUser.signTransaction(tx, { expireSeconds: 120, blocksBehind: 3 })\n      this.props.onSuccess();\n      this.hide();\n    } catch (e) {\n      this.setState({\n        errors: e.cause.json.fields\n      })\n    }\n  }\n  render() {\n    const {\n      domain,\n      ual: { activeUser }\n    } = this.props;\n    const {\n      account,\n      balance,\n      errors,\n      fee,\n      fields,\n      show,\n    } = this.state;\n    return (\n      <Modal\n        closeIcon\n        content={(\n          <Segment\n            padded\n            size=\"large\"\n            style={{ marginTop: 0 }}\n          >\n            <Segment color=\"blue\" secondary>\n              <Table size=\"large\">\n                <Table.Row>\n                  <Table.Cell>\n                    Current FIO Balance\n                  </Table.Cell>\n                  <Table.Cell textAlign=\"right\">\n                    {(balance)\n                      ? (\n                        <strong>{balance[0]}</strong>\n                      )\n                      : (\n                        <Icon name=\"spinner\" loading />\n                      )\n                    }\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>\n                    Domain Registration Fee\n                  </Table.Cell>\n                  <Table.Cell textAlign=\"right\">\n                    {(fee)\n                      ? (\n                        <strong>{(fee.suf_amount / 1000000000).toFixed(9)} FIO</strong>\n                      )\n                      : (\n                        <Icon name=\"spinner\" loading />\n                      )\n                    }\n                  </Table.Cell>\n                </Table.Row>\n              </Table>\n            </Segment>\n            <Form\n              error={errors.length}\n              onSubmit={this.transact}\n            >\n              {Object.keys(fields).map((field) => {\n                const [error] = errors.filter((e) => e.name === field)\n                return (\n                  <Form.Field>\n                    <label>{field}</label>\n                    <Form.Input\n                      error={(error)\n                        ? {\n                          content: error.error,\n                          pointing: 'above',\n                        }\n                        : false\n                      }\n                      name={field}\n                      onChange={this.onChange}\n                      value={fields[field]}\n                    />\n                  </Form.Field>\n                );\n              })}\n              <Message\n                error\n                header='An error occurred while submitting the transaction'\n                content='Check the red fields above to correct the problems and try again.'\n              />\n              <Segment basic clearing>\n                <Button\n                  content=\"Register\"\n                  floated=\"right\"\n                  primary\n                />\n              </Segment>\n            </Form>\n          </Segment>\n        )}\n        header=\"Register a FIO Domain\"\n        open={show}\n        onClose={this.hide}\n        onOpen={this.onOpen}\n        trigger={(\n          <Button\n            basic\n            content={`New address@${domain.name}`}\n            icon=\"plus\"\n            onClick={this.show}\n            primary\n            size=\"small\"\n          />\n        )}\n      />\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport {\n  Button,\n  Container,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Message,\n  Modal,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\n\nconst defaultFields = {\n  fio_domain: '',\n  owner_fio_public_key: '',\n  max_fee: '',\n  actor: '',\n  tpid: '',\n}\n\nexport default class NewDomain extends Component {\n  state = {\n    account: undefined,\n    balance: undefined,\n    errors: [],\n    fee: undefined,\n    fields: defaultFields,\n    show: false,\n  }\n  onOpen = (e, data) => {\n    const { ual: { activeUser } } = this.props;\n    this.resetData();\n    this.getAccount();\n    this.getBalance();\n    this.getFee();\n  }\n  resetData = () => this.setState({\n    account: undefined,\n    balance: undefined,\n    errors: [],\n    fee: undefined,\n    fields: defaultFields,\n  })\n  getAccount = () => {\n    const { ual: { activeUser } } = this.props;\n    activeUser.rpc.get_account(activeUser.accountName).then((account) => {\n      this.setState({\n        account,\n        fields: Object.assign({}, this.state.fields, {\n          actor: activeUser.accountName,\n          owner_fio_public_key: account.permissions.filter((p) => p.perm_name === 'owner')[0].required_auth.keys[0].key\n        })\n      })\n    });\n  }\n  getBalance = () => {\n    const { ual: { activeUser } } = this.props;\n    activeUser.rpc.get_currency_balance('fio.token', activeUser.accountName, 'fio').then((balance) => this.setState({ balance }));\n  }\n  getFee = () => {\n    const { ual: { activeUser: { rpc } } } = this.props;\n    rpc.get_table_rows({\n      code: 'fio.fee',\n      table: 'fiofees',\n      scope: 'fio.fee',\n      key_type: 'i128',\n      index_position: 2,\n      lower_bound: '0x1a5f09714542254caaab363d520adfbd',\n      upper_bound: '0x1a5f09714542254caaab363d520adfbd',\n      limit: 1,\n    }).then((results) => {\n      this.setState({\n        fee: results.rows[0],\n        fields: Object.assign({}, this.state.fields, {\n          max_fee: results.rows[0].suf_amount\n        })\n      });\n      // if (results.rows.length) {\n      //   results.rows.map(this.getAddresses);\n      // }\n    })\n  }\n  hide = () => this.setState({ show: false })\n  show = () => this.setState({ show: true })\n  onChange = (e, { name, value }) => this.setState({\n    fields: Object.assign({}, this.state.fields, {\n      [name]: value\n    })\n  })\n  transact = async () => {\n    const { fields } = this.state;\n    const { ual: { activeUser } } = this.props\n    try {\n      const { accountName, requestPermission } = activeUser\n      const tx = {\n        actions: [{\n          account: 'fio.address',\n          name: 'regdomain',\n          authorization: [{ actor: accountName, permission: requestPermission }],\n          data: fields,\n        }],\n      }\n      await activeUser.signTransaction(tx, { expireSeconds: 120, blocksBehind: 3 })\n      this.props.onSuccess();\n      this.hide();\n    } catch (e) {\n      this.setState({\n        errors: e.cause.json.fields\n      })\n    }\n  }\n  render() {\n    const { ual: { activeUser } } = this.props;\n    const {\n      account,\n      balance,\n      errors,\n      fee,\n      fields,\n      show,\n    } = this.state;\n    return (\n      <Modal\n        closeIcon\n        content={(\n          <Segment\n            padded\n            size=\"large\"\n            style={{ marginTop: 0 }}\n          >\n            <Segment color=\"blue\" secondary>\n              <Table size=\"large\">\n                <Table.Row>\n                  <Table.Cell>\n                    Current FIO Balance\n                  </Table.Cell>\n                  <Table.Cell textAlign=\"right\">\n                    {(balance)\n                      ? (\n                        <strong>{balance[0]}</strong>\n                      )\n                      : (\n                        <Icon name=\"spinner\" loading />\n                      )\n                    }\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>\n                    Domain Registration Fee\n                  </Table.Cell>\n                  <Table.Cell textAlign=\"right\">\n                    {(fee)\n                      ? (\n                        <strong>{(fee.suf_amount / 1000000000).toFixed(9)} FIO</strong>\n                      )\n                      : (\n                        <Icon name=\"spinner\" loading />\n                      )\n                    }\n                  </Table.Cell>\n                </Table.Row>\n              </Table>\n            </Segment>\n            <Form\n              error={errors.length}\n              onSubmit={this.transact}\n            >\n              {Object.keys(fields).map((field) => {\n                const [error] = errors.filter((e) => e.name === field)\n                return (\n                  <Form.Field>\n                    <label>{field}</label>\n                    <Form.Input\n                      error={(error)\n                        ? {\n                          content: error.error,\n                          pointing: 'above',\n                        }\n                        : false\n                      }\n                      name={field}\n                      onChange={this.onChange}\n                      value={fields[field]}\n                    />\n                  </Form.Field>\n                );\n              })}\n              <Message\n                error\n                header='An error occurred while submitting the transaction'\n                content='Check the red fields above to correct the problems and try again.'\n              />\n              <Segment basic clearing>\n                <Button\n                  content=\"Register\"\n                  floated=\"right\"\n                  primary\n                />\n              </Segment>\n            </Form>\n          </Segment>\n        )}\n        header=\"Register a FIO Domain\"\n        open={show}\n        onClose={this.hide}\n        onOpen={this.onOpen}\n        trigger={(\n          <Button\n            content=\"Register Domain\"\n            floated=\"right\"\n            icon=\"plus\"\n            onClick={this.show}\n            primary\n          />\n        )}\n      />\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport {\n  Button,\n  Container,\n  Grid,\n  Header,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\n\nimport { uniqBy } from 'lodash';\n\nimport NewAddress from './Modals/NewAddress';\nimport NewDomain from './Modals/NewDomain';\n\nexport default class Domains extends Component {\n  state = {\n    addresses: [],\n    domains: [],\n  }\n  componentDidMount() {\n    const { ual: { activeUser } } = this.props;\n    if (activeUser) {\n      this.sync()\n    }\n  }\n  sync = () => {\n    const { ual: { activeUser } } = this.props;\n    this.getDomains(activeUser.accountName);\n  }\n  onSuccess = () => {\n    this.sync();\n  }\n  getDomains = (accountName) => {\n    const { ual: { activeUser: { rpc } } } = this.props;\n    rpc.get_table_rows({\n      code: 'fio.address',\n      table: 'domains',\n      scope: 'fio.address',\n      key_type: 'name',\n      index_position: 2,\n      lower_bound: accountName,\n      upper_bound: accountName,\n      limit: 10,\n    }).then((results) => {\n      this.setState({\n        domains: results.rows\n      });\n      if (results.rows.length) {\n        results.rows.map(this.getAddresses);\n      }\n    })\n  }\n  getAddresses = (domain) => {\n    const { ual: { activeUser: { rpc } } } = this.props;\n    rpc.get_table_rows({\n      code: 'fio.address',\n      table: 'fionames',\n      scope: 'fio.address',\n      key_type: 'i128',\n      index_position: 2,\n      lower_bound: domain.domainhash,\n      upper_bound: domain.domainhash,\n      limit: 10,\n    }).then((results) => {\n      this.setState({\n        addresses: uniqBy([...this.state.addresses, ...results.rows], 'id')\n      })\n    })\n  }\n  render() {\n    const {\n      addresses,\n      domains,\n    } = this.state;\n    return (\n      <Container fluid>\n        <Segment\n          attached=\"top\"\n          clearing\n          secondary\n        >\n          <Header\n            floated=\"left\"\n            size=\"large\"\n          >\n            FIO Domains\n          </Header>\n          <NewDomain\n            onSuccess={this.onSuccess}\n            ual={this.props.ual}\n          />\n          <Button\n            content=\"Refresh Data\"\n            floated=\"right\"\n            icon=\"refresh\"\n            onClick={this.sync}\n          />\n        </Segment>\n        {(!domains.length)\n          ? (\n            <Segment\n              attached=\"bottom\"\n              size=\"large\"\n              textAlign=\"center\"\n            >\n              <Header>\n                No domains associated to this account. Register one to get started.\n              </Header>\n            </Segment>\n          )\n          : false\n        }\n        {(domains.length)\n          ? (\n            <Table\n              attached=\"bottom\"\n              striped\n            >\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>\n                    Domain Name\n                  </Table.HeaderCell>\n                  <Table.HeaderCell>\n                    Addresses\n                  </Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {domains.map((domain) => {\n                  const matching = addresses.filter((a) => a.domain === domain.name)\n                  return (\n                    <Table.Row>\n                      <Table.Cell collapsing verticalAlign=\"top\">\n                        <Header>\n                          @{domain.name}\n                        </Header>\n                        <Table definition>\n                          <Table.Body>\n                            <Table.Row>\n                              <Table.Cell>Public</Table.Cell>\n                              <Table.Cell>{(domain.is_public) ? 'True' : 'False'}</Table.Cell>\n                            </Table.Row>\n                            <Table.Row>\n                              <Table.Cell>Expires</Table.Cell>\n                              <Table.Cell>{(new Date(domain.expiration * 1000)).toUTCString()}</Table.Cell>\n                            </Table.Row>\n                          </Table.Body>\n                        </Table>\n                      </Table.Cell>\n                      <Table.Cell>\n                        {(matching.length)\n                          ? (\n                            <Table definition>\n                              <Table.Header>\n                                <Table.HeaderCell>\n                                  Address\n                                </Table.HeaderCell>\n                                <Table.HeaderCell>\n                                  Public Key\n                                </Table.HeaderCell>\n                                <Table.HeaderCell>\n                                  Expires\n                                </Table.HeaderCell>\n                              </Table.Header>\n                              <Table.Body>\n                                {matching.map((address) => (\n                                  <Table.Row>\n                                    <Table.Cell>{address.name}</Table.Cell>\n                                    <Table.Cell>{address.addresses[0].public_address}</Table.Cell>\n                                    <Table.Cell>{(new Date(address.expiration * 1000)).toUTCString()}</Table.Cell>\n                                  </Table.Row>\n                                ))}\n                              </Table.Body>\n                            </Table>\n                          )\n                          : (\n                            <Segment>\n                              <Header size=\"small\">\n                                No associated addresses\n                                <Header.Subheader>\n                                  Create a new FIO address for this domain using the button below.\n                                </Header.Subheader>\n                              </Header>\n                            </Segment>\n                          )\n                        }\n                        <NewAddress\n                          domain={domain}\n                          onSuccess={this.onSuccess}\n                          ual={this.props.ual}\n                        />\n                      </Table.Cell>\n                    </Table.Row>\n                  )\n                })}\n              </Table.Body>\n            </Table>\n          )\n          : false\n        }\n      </Container>\n\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport {\n  Button,\n  Container,\n  Grid,\n  Header,\n  Segment,\n} from 'semantic-ui-react';\n\nimport Account from './components/Account';\nimport Domains from './components/Domains';\n\nexport default class Home extends Component {\n  render() {\n    const { ual } = this.props;\n    return (\n      <Container style={{\n        margin: '3em 0',\n      }}>\n        <Grid relaxed>\n          <Grid.Row>\n            <Grid.Column width={10}>\n              <Header size=\"large\">\n                FIO Registration Helper\n                <Header.Subheader>\n                  A tool to assist with domain and address registration.\n                </Header.Subheader>\n              </Header>\n            </Grid.Column>\n            <Grid.Column width={6} textAlign=\"right\">\n              <Account ual={ual} />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={1}>\n            <Grid.Column>\n              {(ual.activeUser)\n                ? (\n                  <Domains ual={ual} />\n                )\n                : (\n                  <Segment size=\"large\" stacked textAlign=\"center\">\n                    <p>Login to manage domains and addresses for the FIO blockchain.</p>\n                    <Account ual={ual} />\n                  </Segment>\n                )\n              }\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { Button } from 'semantic-ui-react';\n\nimport { Anchor } from 'ual-anchor'\nimport { Scatter } from 'ual-scatter'\nimport { UALProvider, withUAL } from 'ual-reactjs-renderer'\n\nimport Home from './Home';\n\n// const chain = {\n//   chainId: '21dcae42c0182200e93f954a074011f9048a7624c6fe81d3c9541a614a88bd1c',\n//   name: 'FIO',\n//   rpcEndpoints: [{\n//     protocol: 'https',\n//     host: 'fio.greymass.com',\n//     port: 443,\n//   }]\n// }\n\nconst chain = {\n  chainId: 'b20901380af44ef59c5918439a1f9a41d83669020319a80574b804a5f95cbd7e',\n  name: 'FIO Testnet',\n  rpcEndpoints: [{\n    protocol: 'https',\n    host: 'fiotestnet.greymass.com',\n    port: 443,\n  }]\n}\n\nclass UALWrapper extends Component {\n  render () {\n    const anchor = new Anchor([chain], { appName: 'fio-register' })\n    const scatter = new Scatter([chain], { appName: 'fio-register' })\n    return (\n      <UALProvider\n        appName='FIO Registration'\n        authenticators={[anchor, scatter]}\n        chains={[chain]}\n      >\n        <TestAppConsumer />\n      </UALProvider>\n    )\n  }\n}\n\nconst TestAppConsumer = withUAL(Home)\n\nconst App = () => (\n  <UALWrapper />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './semantic/dist/semantic.min.css';\n\nif (module.hot) {\n  module.hot.accept();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}